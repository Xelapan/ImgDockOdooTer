<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="l10n_lu_employees_atn_transport" model="hr.salary.rule">
        <field name="category_id" ref="l10n_lu_hr_payroll.hr_salary_rule_category_bik_transport"/>
        <field name="name">Benefit in Kind (Transportation)</field>
        <field name="code">BIK_TRANSPORT</field>
        <field name="sequence">5</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = contract.l10n_lu_atn_transport
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_gross_tmp" model="hr.salary.rule">
        <field name="category_id" ref="l10n_lu_hr_payroll.hr_salary_rule_category_gross_tmp"/>
        <field name="name">Temporary Gross</field>
        <field name="code">T_GROSS</field>
        <field name="sequence">10</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="appears_on_payslip" eval="False"/>
        <field name="amount_python_compute">
result = categories.BASIC + categories.BIK_TRANSPORT
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_gross_meal_vouchers" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.BASIC"/>
        <field name="name">Meal Vouchers</field>
        <field name="code">MEAL_VOUCHERS</field>
        <field name="sequence">15</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
if not worked_days.WORK100:
    result_qty = 0
elif worked_days.WORK100.number_of_days >= 18:
    result_qty = 18
else:
    total_number_of_days = sum(payslip.dict.worked_days_line_ids.mapped('number_of_days'))
    result_qty = int(18 * worked_days.WORK100.number_of_days / total_number_of_days)
result = 2.8
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <function model="hr.salary.rule" name="write">
        <value model="hr.salary.rule" search="[
            ('struct_id', '=', ref('l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary')),
            ('code', '=', 'GROSS')]"/>
        <value eval="{
            'amount_python_compute': &quot;result = result_rules['T_GROSS']['total'] + result_rules['MEAL_VOUCHERS']['total']&quot;}"/>
    </function>

    <record id="l10n_lu_employees_health_fund" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.DED"/>
        <field name="name">Health Fund</field>
        <field name="code">HEALTH_FUND</field>
        <field name="sequence">105</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = result_rules['T_GROSS']['total']
result_rate = payslip.rule_parameter('l10n_lu_health_fund_tax')
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_cash_sickness_fund" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.DED"/>
        <field name="name">Cash Sickness Fund</field>
        <field name="code">SICK_FUND</field>
        <field name="sequence">110</field>
        <field name="condition_select">none</field>
        <field name="amount_select">percentage</field>
        <field name="amount_percentage_base">BASIC</field>
        <field name="amount_percentage">-0.25</field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_retirement_fund" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.DED"/>
        <field name="name">Retirement Fund</field>
        <field name="code">RETIREMENT_FUND</field>
        <field name="sequence">115</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = result_rules['T_GROSS']['total']
result_rate = payslip.rule_parameter('l10n_lu_retirement_fund_tax')
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_taxes_total" model="hr.salary.rule">
        <field name="category_id" ref="l10n_lu_hr_payroll.hr_salary_rule_category_taxes_data"/>
        <field name="name">Total Taxes</field>
        <field name="code">TAXES_TOTAL</field>
        <field name="sequence">120</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = -(result_rules['HEALTH_FUND']['total'] + result_rules['SICK_FUND']['total'] + result_rules['RETIREMENT_FUND']['total'])
</field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_transport_fees" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.ALW"/>
        <field name="name">Transport Fees</field>
        <field name="code">TRANS_FEES</field>
        <field name="sequence">125</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = contract.employee_id.l10n_lu_travel_expense
</field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_total_allowance" model="hr.salary.rule">
        <field name="category_id" ref="l10n_lu_hr_payroll.hr_salary_rule_category_total_allowance"/>
        <field name="name">Total Allowances</field>
        <field name="code">ALW_TOTAL</field>
        <field name="sequence">130</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = - result_rules['TRANS_FEES']['total']
</field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_taxable_amount" model="hr.salary.rule">
        <field name="category_id" ref="l10n_lu_hr_payroll.hr_salary_rule_category_taxable_amount"/>
        <field name="name">Taxable Amount</field>
        <field name="code">TAXABLE</field>
        <field name="sequence">135</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = GROSS - result_rules['TAXES_TOTAL']['total'] - result_rules['ALW_TOTAL']['total']
</field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_withholding_taxes" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.DED"/>
        <field name="name">Withholding Taxes</field>
        <field name="code">TAXES</field>
        <field name="sequence">140</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = compute_lux_tax(payslip, categories, worked_days, inputs)
</field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_dependency_insurance" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.DED"/>
        <field name="name">Dependency Insurance</field>
        <field name="code">DEP_INS</field>
        <field name="sequence">145</field>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
min_social_pay = payslip.rule_parameter('l10n_lu_min_social_pay')
result = - (contract.wage - (min_social_pay / 4.0)) * 1.4 / 100.0
</field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_employee_tax_credit" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.ALW"/>
        <field name="name">Employee Tax Credit</field>
        <field name="code">TAX_CREDIT</field>
        <field name="sequence">150</field>
        <field name="condition_select">none</field>
        <field name="amount_select">fix</field>
        <field name="amount_fix">58.0</field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_gratification" model="hr.salary.rule">
        <field name="category_id" ref="hr_salary_rule_category_gratification"/>
        <field name="name">Basic Gratification</field>
        <field name="sequence">160</field>
        <field name="code">BASIC_GRATIFICATION</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = inputs.GRATIFICATION</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = inputs['GRATIFICATION'].amount
result_name = inputs['GRATIFICATION'].name
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_gratification_health_fund" model="hr.salary.rule">
        <field name="category_id" ref="hr_salary_rule_category_gratification"/>
        <field name="name">Gratification Health Fund</field>
        <field name="code">GRAT_HEALTH_FUND</field>
        <field name="sequence">161</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = inputs.GRATIFICATION</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = result_rules['BASIC_GRATIFICATION']['total']
result_rate = payslip.rule_parameter('l10n_lu_health_fund_tax')
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_gratification_retirement_fund" model="hr.salary.rule">
        <field name="category_id" ref="hr_salary_rule_category_gratification"/>
        <field name="name">Gratification Retirement Fund</field>
        <field name="code">GRAT_RETIREMENT_FUND</field>
        <field name="sequence">162</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = inputs.GRATIFICATION</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = result_rules['BASIC_GRATIFICATION']['total']
result_rate = payslip.rule_parameter('l10n_lu_retirement_fund_tax')
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_gratification_gross_gratification" model="hr.salary.rule">
        <field name="category_id" ref="hr_salary_rule_category_gratification"/>
        <field name="name">Gross Gratification</field>
        <field name="code">GROSS_GRATIFICATION</field>
        <field name="sequence">163</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = inputs.GRATIFICATION</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = result_rules['BASIC_GRATIFICATION']['total'] + result_rules['GRAT_HEALTH_FUND']['total'] + result_rules['GRAT_RETIREMENT_FUND']['total']
result -= result % 5
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_gratification_tax_on_non_period_revenue" model="hr.salary.rule">
        <field name="category_id" ref="hr_salary_rule_category_gratification"/>
        <field name="name">Tax On Non Period Revenue</field>
        <field name="code">TAX_ON_NON_PERIOD_REVENUE</field>
        <field name="sequence">164</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = inputs.GRATIFICATION</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
# Source: https://impotsdirects.public.lu/fr/baremes.html#Ex
def get_tax(taxable_amount):
    def _find_rate(x, rates):
        for low, high, rate, adjustment in rates:
            if low &lt;= x &lt;= high:
                return rate, adjustment
        return 0, 0

    if employee.l10n_lu_tax_classification:
        rates = payslip.rule_parameter(f'l10n_lu_withholding_annual_taxes_{employee.l10n_lu_tax_classification}')
        threshold, threshold_adjustment = payslip.rule_parameter(f'l10n_lu_withholding_annual_taxes_threshold_{employee.l10n_lu_tax_classification}')
    else:
        return 0.0

    rate, adjustment = _find_rate(taxable_amount, rates)
    tax_amount = taxable_amount * rate - adjustment
    tax_amount -= tax_amount % 1
    if taxable_amount &lt;= threshold:
        tax_amount *= 1.07
    else:
        tax_amount += tax_amount * 0.09 - threshold_adjustment
    tax_amount -= tax_amount % 1

    if tax_amount &lt; 12:
        return 0.0
    return tax_amount

def get_l10n_lu_grat_tax(annual_salary, gratification):
    if gratification == 0:
        return 0

    salary = (annual_salary // 1200) * 1200
    grat = (gratification // 200) * 200
    if grat &lt; 200:
        grat = 50

    tax_rao = get_tax(salary)
    tax_rao_grat = get_tax(salary + grat)

    diff = tax_rao_grat - tax_rao
    if not float_compare(diff, 0.0, precision_digits=2):
        return 0.0

    if salary > 60000 or grat >= 5600:
        return -diff

    rate = diff / grat
    rate -= rate % 0.005
    rate = rate if rate >= 0.01 else 0.0

    tax = rate * gratification
    tax -= tax % 0.1
    return -tax


annual_salary = contract.wage * 12
result = get_l10n_lu_grat_tax(annual_salary, result_rules['GROSS_GRATIFICATION']['total'])
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>

    <record id="l10n_lu_employees_gratification_net_gratification" model="hr.salary.rule">
        <field name="category_id" ref="hr_salary_rule_category_net_gratification"/>
        <field name="name">Net Gratification</field>
        <field name="code">NET_GRATIFICATION</field>
        <field name="sequence">165</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = inputs.GRATIFICATION</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = result_rules['GROSS_GRATIFICATION']['total'] + result_rules['TAX_ON_NON_PERIOD_REVENUE']['total']
        </field>
        <field name="struct_id" ref="l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary"/>
    </record>


    <function model="hr.salary.rule" name="write">
        <value model="hr.salary.rule" search="[
            ('struct_id', '=', ref('l10n_lu_hr_payroll.hr_payroll_structure_lux_employee_salary')),
            ('code', '=', 'NET')]"/>
        <value eval="{
            'amount_python_compute': &quot;result = categories.BASIC + categories.ALW + categories.DED&quot;, 'appears_on_employee_cost_dashboard': True}"/>
    </function>

</odoo>
